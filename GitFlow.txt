// GitFlow 전략
1. main - 본판 ~~> 완성이 다 된다면 합체 
2. develop - 신기능 코드 합치는 곳
3. feature - 신기능 개발 하는 곳 ~~> feature/어쩌구 라고 작명
4. release - develop을 main으로 합치기 전에 임시로 release 올리는 곳 ~~> v1.0 출시 전 여러가지 테스트 
5. hotfix - 오류 발생하면 고치는 곳 ~~> 급하면 main에서 branch 생성 후 PR 해서 고친 후 반영 하는 방법도 있음.

// 장점 : 안정적으로 버전별 배포가능
// 단점 : CI/CD 이런거 하는 곳은 안 좋아함. ~~~> 상황에 맞춰서 쓰면 됨.

// GitFlow 형태 예시
main_v0.9 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - main_v1.0 - - - - - - - - - - - - - - -  main_v1.0.1
|                                                                                                                            |                                         |
|                                                                                                                            | - - - - - - - hotfix_v1.0.0 - - - hotfix_v1.0.1
|                                                                                                                            |                                         |
|                                                                             release_v0.9.0 - - - release_v0.9.1 - - - release_v0.9.2                                 |
|                                                                                   |                                        |                                         |
develop_v0.9 - - - - - - - - - - - - - - - - - - - develop_v0.9.1 - - - - - - develop_v0.9.2 - - - - - - - - - - - - - -develop_v1.0 - - - - - - - - - - - - - - develop_v1.0.1
|                                                           |                       |
|                                                           |                       |
feature/guild_v0.9.0 ----- feature/guild_v0.9.1 --- feature/guild_v0.9.2            |
                                    |                                               |
                                    |                                               |
                           feature/friend_v0.9.0 - - - - - - - - - - - - - - - - - - -
                    
// Trunk-based : 브랜치 하나만 잘 관리하자. ~~~> develop 그런 거 왜 씀?

// 장점 : 소스코드가 한 곳에만 있음
// 단점 : 많은 테스트를 자주 해야함

// Trunk-based 형태 예시
feature1                  feature1_v0.0.1 - - - - feature1_v0.0.2 
                              |                        |
main_v0.0.0 - - - - - - - main_v0.0.1 - - - - - - main_v0.0.2 - - - - - - main_v0.0.3 - - - - main_v0.0.4
                                                       |                        |
feature2                                          feature2_v0.0.2 - - - - feature2_v0.0.3

